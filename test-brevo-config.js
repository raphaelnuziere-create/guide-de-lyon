#!/usr/bin/env node
/**
 * Script de test pour v√©rifier la configuration Brevo
 * Usage: node test-brevo-config.js
 */

import('dotenv/config').then(() => {
  require('dotenv').config({ path: '.env.local' });
}).catch(() => {
  // Si dotenv n'est pas disponible, continuer sans
});

const brevo = require('@getbrevo/brevo');

// V√©rification des variables d'environnement
console.log('üîç V√©rification de la configuration Brevo\n');
console.log('=' .repeat(50));

const requiredVars = {
  'BREVO_API_KEY': process.env.BREVO_API_KEY,
  'BREVO_SENDER_EMAIL': process.env.BREVO_SENDER_EMAIL,
  'BREVO_SENDER_NAME': process.env.BREVO_SENDER_NAME
};

let configOk = true;

for (const [key, value] of Object.entries(requiredVars)) {
  if (value) {
    console.log(`‚úÖ ${key}: Configur√©`);
    if (key === 'BREVO_API_KEY') {
      console.log(`   D√©but de la cl√©: ${value.substring(0, 10)}...`);
    } else {
      console.log(`   Valeur: ${value}`);
    }
  } else {
    console.log(`‚ùå ${key}: MANQUANT`);
    configOk = false;
  }
}

console.log('\n' + '=' .repeat(50));

if (!configOk) {
  console.log('\n‚ùå Configuration incompl√®te !');
  console.log('Ajoutez les variables manquantes dans .env.local\n');
  process.exit(1);
}

// Test de connexion √† l'API Brevo
console.log('\nüîÑ Test de connexion √† l\'API Brevo...\n');

async function testBrevoConnection() {
  try {
    const apiInstance = new brevo.AccountApi();
    const apiKey = apiInstance.authentications['apiKey'];
    apiKey.apiKey = process.env.BREVO_API_KEY;
    
    // R√©cup√©rer les informations du compte
    const account = await apiInstance.getAccount();
    
    console.log('‚úÖ Connexion r√©ussie !');
    console.log('\nüìä Informations du compte Brevo:');
    console.log('=' .repeat(50));
    console.log(`Nom du compte: ${account.companyName || 'N/A'}`);
    console.log(`Email: ${account.email}`);
    console.log(`Plan: ${account.plan?.[0]?.type || 'Free'}`);
    
    if (account.plan?.[0]?.credits) {
      console.log(`Cr√©dits restants: ${account.plan[0].credits}`);
    }
    
    // V√©rifier les domaines authentifi√©s
    const senderApi = new brevo.SendersApi();
    senderApi.authentications['apiKey'].apiKey = process.env.BREVO_API_KEY;
    
    try {
      const senders = await senderApi.getSenders();
      console.log('\nüìß Exp√©diteurs configur√©s:');
      console.log('=' .repeat(50));
      
      if (senders.senders && senders.senders.length > 0) {
        senders.senders.forEach(sender => {
          const status = sender.active ? '‚úÖ Actif' : '‚è∏Ô∏è Inactif';
          console.log(`${status} ${sender.name} <${sender.email}>`);
        });
      } else {
        console.log('‚ö†Ô∏è Aucun exp√©diteur configur√©');
        console.log('Ajoutez un exp√©diteur dans le dashboard Brevo');
      }
    } catch (senderError) {
      console.log('‚ö†Ô∏è Impossible de r√©cup√©rer les exp√©diteurs');
    }
    
    // Test d'envoi (optionnel)
    console.log('\n' + '=' .repeat(50));
    console.log('‚úÖ Configuration Brevo fonctionnelle !');
    console.log('\nPour tester l\'envoi d\'email:');
    console.log('1. Allez sur http://localhost:3000/admin/emails');
    console.log('2. Entrez votre email et envoyez un test');
    
  } catch (error) {
    console.error('‚ùå Erreur de connexion √† Brevo:');
    console.error(error.response?.body || error.message);
    
    console.log('\nüîß Solutions possibles:');
    console.log('1. V√©rifiez que votre cl√© API est correcte');
    console.log('2. V√©rifiez que votre compte Brevo est actif');
    console.log('3. G√©n√©rez une nouvelle cl√© API sur:');
    console.log('   https://app.brevo.com/settings/keys/api');
  }
}

// Ex√©cuter le test
testBrevoConnection();