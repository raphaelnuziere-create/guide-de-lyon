import { supabase } from '@/lib/supabase';
import OpenAI from 'openai';
import { readFileSync } from 'fs';
import { join } from 'path';

// Configuration OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export interface EditorialContent {
  anecdote: {
    title: string;
    content: string;
    short_version: string;
    category: string;
  };
  tip: {
    content: string;
    category: string;
  };
  question: {
    content: string;
    type: string;
  };
  greeting: {
    content: string;
    tone: string;
  };
  weather_comment?: {
    content: string;
    mood: string;
  };
}

export interface PersonalizationContext {
  firstName?: string;
  frequency: 'daily' | 'weekly' | 'monthly';
  preferences: {
    events: boolean;
    news: boolean;
    articles: boolean;
    deals: boolean;
  };
  dayOfWeek: number; // 0-6
  season: 'spring' | 'summer' | 'autumn' | 'winter';
  weather?: {
    condition: string;
    temperature: number;
    description: string;
  };
  timeOfDay: 'morning' | 'afternoon' | 'evening';
}

/**
 * Service principal pour g√©n√©rer du contenu √©ditorial personnalis√©
 */
export class NewsletterEditorialAIService {
  
  private static editorialGuidelines: string = '';

  /**
   * Initialise le service avec les guidelines √©ditoriaux
   */
  private static async loadEditorialGuidelines(): Promise<string> {
    if (this.editorialGuidelines) return this.editorialGuidelines;
    
    try {
      const guidelinesPath = join(process.cwd(), 'content', 'newsletter-editorial-guidelines.md');
      this.editorialGuidelines = readFileSync(guidelinesPath, 'utf-8');
      return this.editorialGuidelines;
    } catch (error) {
      console.error('Erreur chargement guidelines √©ditoriaux:', error);
      return '';
    }
  }

  /**
   * G√©n√®re le contenu √©ditorial personnalis√© pour une newsletter
   */
  static async generateEditorialContent(context: PersonalizationContext): Promise<EditorialContent> {
    const guidelines = await this.loadEditorialGuidelines();
    
    // R√©cup√©rer le contenu de base depuis la BDD
    const baseContent = await this.getBaseContentFromDB(context);
    
    // G√©n√©rer le contenu personnalis√© avec OpenAI
    const personalizedContent = await this.personalizeWithAI(baseContent, context, guidelines);
    
    // Mettre √† jour les statistiques d'usage
    await this.updateUsageStats(baseContent);
    
    return personalizedContent;
  }

  /**
   * R√©cup√®re le contenu de base depuis la base de donn√©es
   */
  private static async getBaseContentFromDB(context: PersonalizationContext) {
    if (!supabase) throw new Error('Supabase not configured');

    try {
      // R√©cup√©rer une anecdote selon le jour de la semaine
      const { data: anecdote } = await supabase
        .rpc('get_daily_anecdote', { target_day: context.dayOfWeek });

      // R√©cup√©rer un conseil d'ami selon le contexte
      const { data: tip } = await supabase
        .rpc('get_friendly_tip', { tip_context: context.timeOfDay });

      // R√©cup√©rer une question engageante
      const { data: question } = await supabase
        .rpc('get_engagement_question', { question_context: context.frequency });

      // R√©cup√©rer une salutation contextuelle
      const { data: greeting } = await supabase
        .rpc('get_contextual_greeting', {
          target_time: context.timeOfDay,
          target_day: context.dayOfWeek,
          weather: context.weather?.condition
        });

      return {
        anecdote: anecdote?.[0] || null,
        tip: tip?.[0] || null,
        question: question?.[0] || null,
        greeting: greeting || null
      };
    } catch (error) {
      console.error('Erreur r√©cup√©ration contenu BDD:', error);
      return { anecdote: null, tip: null, question: null, greeting: null };
    }
  }

  /**
   * Personnalise le contenu avec OpenAI selon les guidelines
   */
  private static async personalizeWithAI(
    baseContent: any, 
    context: PersonalizationContext, 
    guidelines: string
  ): Promise<EditorialContent> {
    
    const systemPrompt = `
Tu es l'assistant √©ditorial de Guide de Lyon, charg√© de personnaliser les newsletters avec un ton amical, sinc√®re et authentique.

CONTEXTE UTILISATEUR:
- Pr√©nom: ${context.firstName || 'ami(e)'}
- Fr√©quence: ${context.frequency}
- Jour: ${this.getDayName(context.dayOfWeek)}
- Saison: ${context.season}
- Moment: ${context.timeOfDay}
- M√©t√©o: ${context.weather ? `${context.weather.condition} (${context.weather.temperature}¬∞C)` : 'inconnue'}

GUIDELINES √âDITORIAUX:
${guidelines}

INSTRUCTIONS SP√âCIFIQUES:
1. TOUJOURS tutoyer et adopter un ton chaleureux d'ami lyonnais
2. Personnaliser avec le pr√©nom quand disponible
3. Adapter au contexte m√©t√©o/temporel
4. Garder l'authenticit√© et la passion pour Lyon
5. Inclure des √©mojis avec mod√©ration
6. Cr√©er du lien social et de la complicit√©

Personnalise le contenu fourni en gardant l'essence mais en l'adaptant parfaitement au contexte.
`;

    try {
      const completion = await openai.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [
          { role: "system", content: systemPrompt },
          { 
            role: "user", 
            content: `
Personnalise ce contenu pour la newsletter ${context.frequency} :

ANECDOTE DE BASE: ${baseContent.anecdote ? JSON.stringify(baseContent.anecdote) : 'Aucune anecdote disponible'}

CONSEIL DE BASE: ${baseContent.tip ? JSON.stringify(baseContent.tip) : 'Aucun conseil disponible'}

QUESTION DE BASE: ${baseContent.question ? JSON.stringify(baseContent.question) : 'Aucune question disponible'}

SALUTATION DE BASE: ${baseContent.greeting || 'Aucune salutation disponible'}

Retourne un JSON avec cette structure exacte :
{
  "anecdote": {
    "title": "Titre personnalis√©",
    "content": "Contenu complet personnalis√© avec ton amical",
    "short_version": "Version courte pour newsletter",
    "category": "cat√©gorie"
  },
  "tip": {
    "content": "Conseil personnalis√© avec ton d'ami",
    "category": "cat√©gorie"
  },
  "question": {
    "content": "Question engageante personnalis√©e",
    "type": "type de question"
  },
  "greeting": {
    "content": "Salutation chaleureuse personnalis√©e avec pr√©nom",
    "tone": "warm/playful/energetic"
  }
  ${context.weather ? ',\n  "weather_comment": {\n    "content": "Commentaire sur la m√©t√©o li√© √† Lyon",\n    "mood": "joyeux/cocooning/energique"\n  }' : ''}
}
            `
          }
        ],
        temperature: 0.7,
        max_tokens: 2000,
      });

      const response = completion.choices[0]?.message?.content;
      if (!response) throw new Error('Pas de r√©ponse d\'OpenAI');

      // Parser la r√©ponse JSON
      const cleanResponse = response.replace(/```json\n?|\n?```/g, '');
      const personalizedContent = JSON.parse(cleanResponse);

      return personalizedContent;

    } catch (error) {
      console.error('Erreur personnalisation OpenAI:', error);
      
      // Fallback avec contenu de base si erreur
      return this.createFallbackContent(baseContent, context);
    }
  }

  /**
   * G√©n√®re un contenu de fallback si OpenAI √©choue
   */
  private static createFallbackContent(baseContent: any, context: PersonalizationContext): EditorialContent {
    const firstName = context.firstName || 'ami(e)';
    
    return {
      anecdote: {
        title: baseContent.anecdote?.title || 'Histoire lyonnaise',
        content: baseContent.anecdote?.content || 'Lyon regorge d\'histoires fascinantes !',
        short_version: baseContent.anecdote?.short_version || 'Lyon, ville d\'histoires !',
        category: baseContent.anecdote?.category || 'general'
      },
      tip: {
        content: baseContent.tip?.tip_text || `Petit conseil de Lyon pour ${firstName} : profite bien de ta journ√©e ! üòä`,
        category: baseContent.tip?.category || 'general'
      },
      question: {
        content: baseContent.question?.question_text || `Alors ${firstName}, dis-moi ce qui te pla√Æt le plus √† Lyon ? ü§î`,
        type: baseContent.question?.question_type || 'preference'
      },
      greeting: {
        content: baseContent.greeting || `Salut ${firstName} ! üëã`,
        tone: 'warm'
      }
    };
  }

  /**
   * Met √† jour les statistiques d'usage du contenu utilis√©
   */
  private static async updateUsageStats(baseContent: any): Promise<void> {
    if (!supabase) return;

    try {
      const updates = [];

      if (baseContent.anecdote?.id) {
        updates.push(
          supabase
            .from('newsletter_editorial_content')
            .update({ 
              usage_count: supabase.sql`usage_count + 1`,
              last_used_at: new Date().toISOString()
            })
            .eq('id', baseContent.anecdote.id)
        );
      }

      if (baseContent.tip?.id) {
        updates.push(
          supabase
            .from('newsletter_friendly_tips')
            .update({ 
              usage_count: supabase.sql`usage_count + 1`,
              last_used_at: new Date().toISOString()
            })
            .eq('id', baseContent.tip.id)
        );
      }

      if (baseContent.question?.id) {
        updates.push(
          supabase
            .from('newsletter_engagement_questions')
            .update({ 
              usage_count: supabase.sql`usage_count + 1`,
              last_used_at: new Date().toISOString()
            })
            .eq('id', baseContent.question.id)
        );
      }

      await Promise.all(updates);
    } catch (error) {
      console.error('Erreur mise √† jour statistiques:', error);
    }
  }

  /**
   * G√©n√®re une section m√©t√©o personnalis√©e
   */
  static async generateWeatherSection(context: PersonalizationContext): Promise<string> {
    if (!context.weather) return '';

    const prompt = `
G√©n√®re un commentaire m√©t√©o amical pour Lyon avec ces infos :
- Condition: ${context.weather.condition}
- Temp√©rature: ${context.weather.temperature}¬∞C
- Description: ${context.weather.description}

Ton : ami lyonnais chaleureux, 1-2 phrases max, avec √©moji appropri√©.
Relie toujours la m√©t√©o √† des activit√©s ou lieux lyonnais sp√©cifiques.
Exemples de style attendu :
- "Il pleut ? Parfait pour d√©couvrir ces super caf√©s cosy de la Presqu'√Æle ! ‚òî"
- "Grand soleil sur Lyon ! Les terrasses des berges du Rh√¥ne t'attendent üòé"
    `;

    try {
      const completion = await openai.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [{ role: "user", content: prompt }],
        temperature: 0.8,
        max_tokens: 150,
      });

      return completion.choices[0]?.message?.content || '';
    } catch (error) {
      console.error('Erreur g√©n√©ration m√©t√©o:', error);
      return '';
    }
  }

  /**
   * G√©n√®re une r√©flexion personnelle pour l'√©dito mensuel
   */
  static async generateMonthlyEditorial(
    month: string, 
    year: string, 
    context: PersonalizationContext
  ): Promise<string> {
    const guidelines = await this.loadEditorialGuidelines();
    
    const prompt = `
${guidelines}

G√©n√®re un √©dito personnel et authentique pour la newsletter mensuelle de Guide de Lyon.

CONTEXTE:
- Mois: ${month} ${year}
- Saison: ${context.season}
- Pr√©nom lecteur: ${context.firstName || 'ami(e)'}

EXIGENCES:
1. Ton personnel et sinc√®re (comme une lettre √† un ami)
2. R√©flexion sur Lyon, son √©volution, ses enjeux du moment
3. Lien avec la saison/p√©riode
4. Entre 200-300 mots
5. Tutoiement obligatoire
6. √âmojis avec mod√©ration
7. Finir par une ouverture/question

Structure sugg√©r√©e :
- Salutation personnelle
- R√©flexion sur Lyon ce mois-ci
- Observation personnelle/anecdote
- Ouverture vers l'avenir
- Question engageante

√âcris comme si tu √©tais Emma, lyonnaise passionn√©e qui aime sa ville.
    `;

    try {
      const completion = await openai.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [{ role: "user", content: prompt }],
        temperature: 0.7,
        max_tokens: 500,
      });

      return completion.choices[0]?.message?.content || '';
    } catch (error) {
      console.error('Erreur g√©n√©ration √©dito mensuel:', error);
      return '';
    }
  }

  /**
   * Analyse et am√©liore les performances du contenu existant
   */
  static async analyzeContentPerformance(): Promise<void> {
    if (!supabase) return;

    try {
      // R√©cup√©rer les statistiques de performance
      const { data: stats } = await supabase
        .from('newsletter_sends')
        .select(`
          newsletter_content_id,
          opened_at,
          clicked_at,
          sent_at
        `)
        .not('newsletter_content_id', 'is', null);

      if (!stats) return;

      // Calculer les scores de performance
      const performanceScores = new Map();
      
      stats.forEach(stat => {
        const contentId = stat.newsletter_content_id;
        if (!performanceScores.has(contentId)) {
          performanceScores.set(contentId, { opens: 0, clicks: 0, sends: 0 });
        }
        
        const score = performanceScores.get(contentId);
        score.sends++;
        if (stat.opened_at) score.opens++;
        if (stat.clicked_at) score.clicks++;
      });

      // Mettre √† jour les scores dans la BDD
      for (const [contentId, scores] of performanceScores) {
        const openRate = scores.opens / scores.sends;
        const clickRate = scores.clicks / scores.sends;
        const performanceScore = (openRate * 0.7 + clickRate * 0.3) * 10;

        await supabase
          .from('newsletter_editorial_content')
          .update({ performance_score: Math.round(performanceScore * 100) / 100 })
          .eq('id', contentId);
      }

    } catch (error) {
      console.error('Erreur analyse performance:', error);
    }
  }

  /**
   * Utilitaires
   */
  private static getDayName(dayOfWeek: number): string {
    const days = ['Dimanche', 'Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi'];
    return days[dayOfWeek] || 'Inconnu';
  }

  private static getCurrentSeason(): 'spring' | 'summer' | 'autumn' | 'winter' {
    const month = new Date().getMonth() + 1;
    if (month >= 3 && month <= 5) return 'spring';
    if (month >= 6 && month <= 8) return 'summer';
    if (month >= 9 && month <= 11) return 'autumn';
    return 'winter';
  }

  /**
   * G√©n√®re un contexte de personnalisation automatique
   */
  static createPersonalizationContext(
    subscriber: any,
    weather?: any
  ): PersonalizationContext {
    const now = new Date();
    
    return {
      firstName: subscriber.first_name,
      frequency: subscriber.daily_frequency ? 'daily' : 
                subscriber.weekly_frequency ? 'weekly' : 'monthly',
      preferences: {
        events: subscriber.wants_events || false,
        news: subscriber.wants_news || false,
        articles: subscriber.wants_articles || false,
        deals: subscriber.wants_deals || false,
      },
      dayOfWeek: now.getDay(),
      season: this.getCurrentSeason(),
      weather: weather ? {
        condition: weather.condition,
        temperature: weather.temperature,
        description: weather.description
      } : undefined,
      timeOfDay: now.getHours() < 12 ? 'morning' : 
                 now.getHours() < 18 ? 'afternoon' : 'evening'
    };
  }
}