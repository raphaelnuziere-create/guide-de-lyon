/**
 * G√©n√©rateur de contenu intelligent bas√© sur OpenAI
 */

import { openai, isOpenAIConfigured } from './client'

export interface ArticleContext {
  title: string
  slug: string
  currentContent?: string
  excerpt?: string
}

export async function generateArticleContent(context: ArticleContext): Promise<{
  content: string
  metaDescription: string
  excerpt: string
} | null> {
  if (!isOpenAIConfigured() || !openai) {
    console.error('‚ùå OpenAI non configur√©')
    return null
  }

  try {
    // Analyser le titre pour extraire le sujet principal
    const subject = extractSubject(context.title, context.slug)
    
    // G√©n√©rer le prompt principal pour le contenu
    const contentPrompt = buildContentPrompt(subject, context)
    
    // G√©n√©rer le contenu principal
    console.log(`ü§ñ G√©n√©ration du contenu pour: ${context.title}`)
    const contentResponse = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [
        {
          role: 'system',
          content: 'Tu es un expert en r√©daction web et en tourisme lyonnais. Tu DOIS √©crire des articles TR√àS LONGS et COMPLETS. Minimum ABSOLU : 1500 mots. Objectif : 2000 mots. Sois EXHAUSTIF dans tes descriptions.'
        },
        {
          role: 'user',
          content: contentPrompt + '\n\nRAPPEL CRUCIAL : √âcris un article LONG et D√âTAILL√â d\'au moins 1500 mots. Ne sois pas concis, d√©veloppe chaque point en profondeur.'
        }
      ],
      max_tokens: 6000,
      temperature: 0.7,
    })

    const content = contentResponse.choices[0]?.message?.content || ''
    
    if (!content) {
      throw new Error('Contenu vide g√©n√©r√©')
    }

    // G√©n√©rer la meta description
    const metaResponse = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        {
          role: 'user',
          content: `G√©n√®re une meta description SEO de 150-160 caract√®res pour cet article sur "${context.title}" √† Lyon. R√©ponds uniquement avec la meta description.`
        }
      ],
      max_tokens: 100,
      temperature: 0.5,
    })

    const metaDescription = metaResponse.choices[0]?.message?.content || ''

    // G√©n√©rer l'extrait
    const excerptResponse = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        {
          role: 'user',
          content: `Cr√©e un extrait accrocheur de 150-200 caract√®res pour l'article "${context.title}". R√©ponds uniquement avec l'extrait.`
        }
      ],
      max_tokens: 100,
      temperature: 0.5,
    })

    const excerpt = excerptResponse.choices[0]?.message?.content || ''

    return {
      content: formatContent(content),
      metaDescription: metaDescription.substring(0, 160),
      excerpt: excerpt.substring(0, 200)
    }

  } catch (error) {
    console.error(`‚ùå Erreur g√©n√©ration pour ${context.title}:`, error)
    return null
  }
}

function extractSubject(title: string, slug: string): string {
  // Nettoyer le titre pour extraire le sujet principal
  let subject = title
    .replace(/^(le|la|les|l')\s+/i, '')
    .replace(/\s*:.*$/, '')
    .replace(/\s*-.*$/, '')
    .replace(/\s+√†\s+lyon.*$/i, '')
    .replace(/\s+lyon.*$/i, '')
    .trim()

  // Si le sujet est trop g√©n√©rique, utiliser le slug pour plus de contexte
  if (subject.length < 10) {
    subject = slug
      .replace(/-/g, ' ')
      .replace(/lyon/gi, '')
      .trim()
  }

  return subject || title
}

function buildContentPrompt(subject: string, context: ArticleContext): string {
  const titleLower = context.title.toLowerCase()
  
  // D√©terminer le type de contenu √† g√©n√©rer bas√© sur des indices dans le titre
  let contentType = 'article informatif'
  let structure = ''
  
  if (titleLower.includes('restaurant') || titleLower.includes('bouchon') || titleLower.includes('cuisine')) {
    contentType = 'article sur un restaurant'
    structure = `
Structure sugg√©r√©e :
- Introduction captivante
- Histoire et concept du restaurant
- Sp√©cialit√©s et carte
- Ambiance et d√©cor
- Informations pratiques (adresse, horaires, prix)
- Que faire aux alentours`
  } else if (titleLower.includes('h√¥tel') || titleLower.includes('hotel') || titleLower.includes('h√©bergement')) {
    contentType = 'article sur un h√¥tel'
    structure = `
Structure sugg√©r√©e :
- Pr√©sentation de l'√©tablissement
- Types de chambres et √©quipements
- Services propos√©s
- Localisation et accessibilit√©
- Tarifs et r√©servation
- Attractions √† proximit√©`
  } else if (titleLower.includes('mus√©e') || titleLower.includes('parc') || titleLower.includes('monument')) {
    contentType = 'article touristique'
    structure = `
Structure sugg√©r√©e :
- Introduction sur l'attraction
- Histoire et importance culturelle
- Que voir et faire
- Informations pratiques
- Conseils de visite
- Autres attractions proches`
  } else if (titleLower.includes('guide') || titleLower.includes('meilleur') || titleLower.includes('top')) {
    contentType = 'guide ou s√©lection'
    structure = `
Structure sugg√©r√©e :
- Introduction du guide
- Crit√®res de s√©lection
- Liste d√©taill√©e avec descriptions
- Comparaisons et recommandations
- Conseils pratiques
- Conclusion avec suggestions`
  }

  return `R√©dige un ${contentType} unique et d√©taill√© sur "${subject}" √† Lyon.

Titre de l'article : ${context.title}

CONSIGNES CRITIQUES :
1. V√âRIFIE LA V√âRACIT√â : Ne mentionne QUE des √©tablissements/lieux qui existent R√âELLEMENT √† Lyon
2. Si tu n'es pas s√ªr qu'un lieu existe, NE PAS l'inventer
3. Utilise des exemples R√âELS et V√âRIFI√âS de Lyon
4. Structure avec des titres Markdown (## pour H2, ### pour H3)
5. Longueur : 1500-2000 mots MINIMUM
6. Inclus AU MOINS 2-3 liens externes vers des sites officiels (office tourisme, sites d'√©tablissements, etc.)
7. Format des liens : [texte du lien](URL)
8. √âvite les phrases g√©n√©riques et le contenu passe-partout
9. NE JAMAIS utiliser un seul # pour les titres (utilise ## ou ###)

STRUCTURE OBLIGATOIRE :
- Introduction engageante (sans titre)
- ## Premier titre principal
- Contenu d√©taill√© avec des informations concr√®tes
- ## Deuxi√®me titre principal 
- Plus de contenu sp√©cifique
- ### Sous-sections si n√©cessaire
- ## Informations pratiques
- Adresses, horaires, tarifs r√©els
- ## Conclusion

${structure}

EXEMPLE DE LIENS √Ä INCLURE :
- Site officiel de l'Office du Tourisme : [Only Lyon](https://www.onlylyon.com)
- Sites d'√©tablissements mentionn√©s
- Ressources utiles pertinentes

${context.currentContent && context.currentContent.length > 100 ? 
  `\nContenu existant √† am√©liorer (garde les infos pertinentes mais r√©√©cris compl√®tement) :\n${context.currentContent.substring(0, 500)}...` : 
  ''}

Commence directement par le contenu de l'article, sans titre principal (il sera ajout√© automatiquement).`
}

function formatContent(content: string): string {
  // Nettoyer et formater le contenu
  let formatted = content
    .replace(/^#\s+[^\n]+\n/, '') // Enlever le titre principal s'il y en a un (avec un seul #)
    .replace(/\n#\s+([^\n]+)/g, '\n## $1') // Remplacer les # seuls par ##
    .replace(/\*\*([^*]+)\*\*/g, '**$1**') // Assurer le bon formatage du gras
    .replace(/\n{3,}/g, '\n\n') // Limiter les sauts de ligne
    .replace(/\n\s*\n\s*\n/g, '\n\n') // Nettoyer les espaces vides multiples
    .trim()
  
  // V√©rifier qu'il n'y a pas de # isol√©s (toujours au moins ##)
  if (formatted.includes('\n# ')) {
    console.warn('‚ö†Ô∏è D√©tection de titres avec un seul #, correction en cours...')
    formatted = formatted.replace(/\n# /g, '\n## ')
  }
  
  return formatted
}