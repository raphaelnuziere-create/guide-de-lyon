/**
 * Script d'initialisation des comptes de test
 * √Ä ex√©cuter une seule fois pour cr√©er les comptes admin et merchant de test
 * 
 * Usage: node scripts/init-test-accounts.js
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Charger les variables d'environnement
dotenv.config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY; // Cl√© service avec droits admin

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement manquantes');
  console.log('Assurez-vous d\'avoir configur√©:');
  console.log('- NEXT_PUBLIC_SUPABASE_URL');
  console.log('- SUPABASE_SERVICE_ROLE_KEY (cl√© service role, pas anon)');
  process.exit(1);
}

// Cr√©er le client Supabase avec la cl√© service
const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

async function createTestAccounts() {
  console.log('üöÄ Cr√©ation des comptes de test...\n');

  // 1. Cr√©er le compte admin
  console.log('üìå Cr√©ation du compte admin...');
  try {
    const { data: adminAuth, error: adminError } = await supabase.auth.admin.createUser({
      email: 'admin@guide-de-lyon.fr',
      password: 'Admin2025!',
      email_confirm: true,
      user_metadata: {
        display_name: 'Administrateur',
        role: 'admin'
      }
    });

    if (adminError) {
      if (adminError.message.includes('already been registered')) {
        console.log('‚ö†Ô∏è  Le compte admin existe d√©j√†');
      } else {
        throw adminError;
      }
    } else if (adminAuth?.user) {
      // Mettre √† jour le profil
      await supabase
        .from('profiles')
        .upsert({
          id: adminAuth.user.id,
          role: 'admin',
          display_name: 'Administrateur'
        });
      console.log('‚úÖ Compte admin cr√©√© avec succ√®s');
    }
  } catch (error) {
    console.error('‚ùå Erreur cr√©ation admin:', error.message);
  }

  // 2. Cr√©er le compte merchant de test
  console.log('\nüìå Cr√©ation du compte merchant de test...');
  try {
    const { data: merchantAuth, error: merchantError } = await supabase.auth.admin.createUser({
      email: 'merchant@guide-de-lyon.fr',
      password: 'Merchant2025!',
      email_confirm: true,
      user_metadata: {
        display_name: 'Restaurant Test Lyon',
        role: 'merchant'
      }
    });

    if (merchantError) {
      if (merchantError.message.includes('already been registered')) {
        console.log('‚ö†Ô∏è  Le compte merchant existe d√©j√†');
      } else {
        throw merchantError;
      }
    } else if (merchantAuth?.user) {
      // Cr√©er le profil merchant
      await supabase
        .from('profiles')
        .upsert({
          id: merchantAuth.user.id,
          role: 'merchant',
          display_name: 'Restaurant Test Lyon'
        });

      // Cr√©er les donn√©es merchant
      await supabase
        .from('merchants')
        .upsert({
          id: merchantAuth.user.id,
          company_name: 'Restaurant Test Lyon',
          email: 'merchant@guide-de-lyon.fr',
          phone: '04 78 12 34 56',
          plan: 'free',
          verified: true,
          verification_date: new Date().toISOString()
        });

      console.log('‚úÖ Compte merchant cr√©√© avec succ√®s');
    }
  } catch (error) {
    console.error('‚ùå Erreur cr√©ation merchant:', error.message);
  }

  console.log('\n' + '='.repeat(50));
  console.log('üìù COMPTES DE TEST DISPONIBLES:');
  console.log('='.repeat(50));
  console.log('\nüîê ADMIN:');
  console.log('   Email: admin@guide-de-lyon.fr');
  console.log('   Pass:  Admin2025!');
  console.log('\nüè¢ MERCHANT:');
  console.log('   Email: merchant@guide-de-lyon.fr');
  console.log('   Pass:  Merchant2025!');
  console.log('\n‚ú® Les comptes sont pr√™ts √† √™tre utilis√©s !');
}

// Ex√©cuter le script
createTestAccounts().catch(console.error);