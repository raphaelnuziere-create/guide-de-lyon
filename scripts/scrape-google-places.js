#!/usr/bin/env node

/**
 * Script de scraping via Google Places API
 * R√©cup√®re les vraies informations et photos des √©tablissements
 */

const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

// Configuration - La cl√© API Google sera prise depuis les variables d'environnement
let GOOGLE_API_KEY = process.env.GOOGLE_PLACES_API_KEY || 'YOUR_GOOGLE_PLACES_API_KEY';

// Lire les variables d'environnement depuis .env.local
const envPath = path.join(__dirname, '..', '.env.local');
const envContent = fs.readFileSync(envPath, 'utf8');
const envVars = {};
envContent.split('\n').forEach(line => {
  const [key, ...valueParts] = line.split('=');
  if (key && valueParts.length > 0) {
    envVars[key.trim()] = valueParts.join('=').trim().replace(/^["']|["']$/g, '');
  }
});

// Si la cl√© API n'est pas dans les variables d'environnement, essayer depuis .env.local
if (!GOOGLE_API_KEY || GOOGLE_API_KEY === 'YOUR_GOOGLE_PLACES_API_KEY') {
  GOOGLE_API_KEY = envVars.GOOGLE_PLACES_API_KEY || GOOGLE_API_KEY;
}

const supabase = createClient(
  envVars.NEXT_PUBLIC_SUPABASE_URL,
  envVars.SUPABASE_SERVICE_ROLE_KEY
);

// Liste d'√©tablissements √† rechercher avec Google Places
const ESTABLISHMENTS_TO_SEARCH = {
  'restaurant-food': [
    'Paul Bocuse Collonges',
    'Brasserie Georges Lyon',
    'Les Halles de Lyon Paul Bocuse',
    'Daniel et Denise Lyon',
    'Le Bouchon des Filles Lyon',
    'La M√®re Brazier Lyon',
    'Takao Takano Lyon',
    'Le Kitchen Caf√© Lyon',
    'Caf√© Comptoir Abel Lyon',
    'Le Neuvi√®me Art Lyon'
  ],
  'bar-nightlife': [
    'Le Sucre Lyon',
    'Ninkasi Gerland',
    'Mama Shelter Lyon rooftop',
    'Le Florian Lyon',
    'L\'Antiquaire Lyon bar',
    'Hot Club de Lyon',
    'Wallace Bar Lyon',
    'Le Bootlegger Lyon',
    'La Ruche Lyon',
    'Le Comptoir de la Bourse Lyon'
  ],
  'shopping-mode': [
    'Centre Commercial Part-Dieu',
    'Confluence Shopping Center Lyon',
    'Galeries Lafayette Lyon',
    'Village des Cr√©ateurs Lyon',
    'Printemps Lyon',
    'March√© de la Croix-Rousse',
    'Decathlon Lyon Confluence',
    'IKEA Saint-Priest',
    'Fnac Bellecour',
    'Apple Store Lyon'
  ],
  'beaute-bienetre': [
    'Spa Lyon Plage',
    'Institut Nuxe Spa Lyon',
    'Coiffeur Kraemer Lyon',
    'L\'Instant Spa Lyon',
    'Sephora Lyon R√©publique',
    'Yves Rocher Lyon',
    'Passage Bleu Lyon',
    'O Zen Spa Lyon',
    'Marionnaud Lyon',
    'Basic Fit Lyon Part-Dieu'
  ],
  'hotel-hebergement': [
    'InterContinental Lyon Hotel Dieu',
    'Villa Florentine Lyon',
    'Sofitel Lyon Bellecour',
    'Mama Shelter Lyon hotel',
    'Radisson Blu Hotel Lyon',
    'Hotel Carlton Lyon',
    'Mercure Lyon Centre Ch√¢teau Perrache',
    'Ibis Lyon Centre Perrache',
    'Novotel Lyon Confluence',
    'B&B Hotel Lyon Centre'
  ],
  'culture-loisirs': [
    'Mus√©e des Confluences',
    'Mus√©e des Beaux-Arts Lyon',
    'Op√©ra de Lyon',
    'Th√©√¢tre des C√©lestins',
    'Aquarium de Lyon',
    'Parc de la T√™te d\'Or',
    'Institut Lumi√®re',
    'MAC Lyon mus√©e',
    'Cin√©ma Path√© Bellecour',
    'Mini World Lyon'
  ]
};

// Fonction pour rechercher un lieu via Google Places
async function searchPlace(query) {
  try {
    // Text Search pour trouver le lieu
    const searchUrl = `https://maps.googleapis.com/maps/api/place/textsearch/json?query=${encodeURIComponent(query)}&key=${GOOGLE_API_KEY}`;
    
    const searchResponse = await fetch(searchUrl);
    const searchData = await searchResponse.json();
    
    if (searchData.status !== 'OK' || !searchData.results || searchData.results.length === 0) {
      console.log(`‚ùå Aucun r√©sultat pour: ${query}`);
      return null;
    }
    
    const place = searchData.results[0];
    const placeId = place.place_id;
    
    // Details pour obtenir toutes les informations
    const detailsUrl = `https://maps.googleapis.com/maps/api/place/details/json?place_id=${placeId}&fields=name,formatted_address,formatted_phone_number,website,opening_hours,photos,rating,user_ratings_total,geometry,business_status,types,editorial_summary&language=fr&key=${GOOGLE_API_KEY}`;
    
    const detailsResponse = await fetch(detailsUrl);
    const detailsData = await detailsResponse.json();
    
    if (detailsData.status !== 'OK') {
      console.log(`‚ùå Erreur d√©tails pour: ${query}`);
      return null;
    }
    
    return detailsData.result;
  } catch (error) {
    console.error(`‚ùå Erreur API pour ${query}:`, error);
    return null;
  }
}

// Fonction pour obtenir l'URL d'une photo Google Places
function getPhotoUrl(photoReference, maxWidth = 800) {
  return `https://maps.googleapis.com/maps/api/place/photo?maxwidth=${maxWidth}&photoreference=${photoReference}&key=${GOOGLE_API_KEY}`;
}

// Fonction pour g√©n√©rer un slug
function generateSlug(name) {
  return name
    .toLowerCase()
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '')
    .replace(/[^a-z0-9]+/g, '-')
    .replace(/^-+|-+$/g, '');
}

// Fonction pour extraire l'arrondissement de l'adresse
function extractDistrict(address) {
  const match = address.match(/690\d{2}/);
  if (match) {
    const postalCode = match[0];
    const district = postalCode.substring(3);
    if (district === '01') return 'Lyon 1er';
    if (district === '02') return 'Lyon 2e';
    if (district === '03') return 'Lyon 3e';
    if (district === '04') return 'Lyon 4e';
    if (district === '05') return 'Lyon 5e';
    if (district === '06') return 'Lyon 6e';
    if (district === '07') return 'Lyon 7e';
    if (district === '08') return 'Lyon 8e';
    if (district === '09') return 'Lyon 9e';
  }
  return null;
}

// Fonction pour ins√©rer les m√©dias d'un √©tablissement
async function insertEstablishmentMedia(establishmentId, photos) {
  if (!photos || photos.length === 0) return;

  for (let i = 0; i < photos.length; i++) {
    const photoUrl = photos[i];
    
    const mediaData = {
      establishment_id: establishmentId,
      type: 'image',
      url: photoUrl,
      display_order: i,
      is_active: true
    };

    const { error } = await supabase
      .from('establishment_media')
      .insert(mediaData);

    if (error) {
      console.error(`‚ùå Erreur insertion m√©dia ${i + 1}:`, error.message);
    }
  }
}

// Fonction principale de scraping
async function scrapeWithGooglePlaces() {
  console.log('üöÄ D√©but du scraping Google Places...\n');
  console.log('‚ö†Ô∏è  IMPORTANT: Remplacez GOOGLE_API_KEY dans ce script par votre cl√© API Google Places\n');
  
  if (GOOGLE_API_KEY === 'YOUR_GOOGLE_PLACES_API_KEY') {
    console.error('‚ùå ERREUR: Vous devez configurer votre cl√© API Google Places dans le script');
    console.log('\nüìù Instructions:');
    console.log('1. Allez sur https://console.cloud.google.com/');
    console.log('2. Cr√©ez un projet ou s√©lectionnez-en un existant');
    console.log('3. Activez "Places API" et "Maps JavaScript API"');
    console.log('4. Cr√©ez une cl√© API dans "Credentials"');
    console.log('5. Remplacez YOUR_GOOGLE_PLACES_API_KEY dans ce script par votre cl√©');
    return;
  }

  let totalUpdated = 0;
  let totalErrors = 0;

  for (const [sector, establishments] of Object.entries(ESTABLISHMENTS_TO_SEARCH)) {
    console.log(`\nüìç Secteur: ${sector}`);
    console.log('=' .repeat(40));

    for (const searchQuery of establishments) {
      console.log(`\nüîç Recherche: ${searchQuery}`);
      
      // Attendre un peu entre les requ√™tes pour respecter les limites
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const placeData = await searchPlace(searchQuery);
      
      if (!placeData) {
        totalErrors++;
        continue;
      }

      try {
        const slug = generateSlug(placeData.name);
        
        // Pr√©parer les photos
        const photos = [];
        if (placeData.photos && placeData.photos.length > 0) {
          // Prendre jusqu'√† 5 photos
          const photosToGet = placeData.photos.slice(0, 5);
          for (const photo of photosToGet) {
            photos.push(getPhotoUrl(photo.photo_reference));
          }
        }
        
        // Pr√©parer les horaires
        let openingHours = {};
        if (placeData.opening_hours && placeData.opening_hours.weekday_text) {
          // Convertir les horaires Google en notre format
          // Format Google: "lundi: 09:00 ‚Äì 18:00" ou "lundi: Ferm√©"
          const dayMapping = {
            'lundi': 'monday', 'mardi': 'tuesday', 'mercredi': 'wednesday',
            'jeudi': 'thursday', 'vendredi': 'friday', 'samedi': 'saturday', 'dimanche': 'sunday'
          };
          
          placeData.opening_hours.weekday_text.forEach(dayText => {
            // Parser le format "lundi: 09:00 ‚Äì 18:00"
            const parts = dayText.split(':');
            if (parts.length >= 2) {
              const dayName = parts[0].trim().toLowerCase();
              const timeInfo = parts[1].trim();
              
              if (dayMapping[dayName]) {
                if (timeInfo.toLowerCase().includes('ferm√©') || timeInfo.toLowerCase().includes('closed')) {
                  openingHours[dayMapping[dayName]] = {
                    open: null,
                    close: null,
                    closed: true
                  };
                } else {
                  // Parser les heures "09:00 ‚Äì 18:00"
                  const timeMatch = timeInfo.match(/(\d{1,2}:\d{2})\s*[‚Äì\-]\s*(\d{1,2}:\d{2})/);
                  if (timeMatch) {
                    openingHours[dayMapping[dayName]] = {
                      open: timeMatch[1],
                      close: timeMatch[2],
                      closed: false
                    };
                  }
                }
              }
            }
          });
        }
        
        // Extraire le code postal de l'adresse
        const postalCodeMatch = placeData.formatted_address?.match(/(\d{5})/);
        const postalCode = postalCodeMatch ? postalCodeMatch[1] : null;

        // Pr√©parer les donn√©es √† ins√©rer/mettre √† jour
        const establishmentData = {
          slug,
          name: placeData.name,
          description: placeData.editorial_summary?.overview || `√âtablissement renomm√© de Lyon dans la cat√©gorie ${sector}`,
          short_description: placeData.editorial_summary?.overview?.substring(0, 500),
          phone: placeData.formatted_phone_number,
          website: placeData.website,
          address: placeData.formatted_address,
          postal_code: postalCode,
          city: 'Lyon',
          category: sector,
          status: 'active',
          opening_hours: openingHours,
          latitude: placeData.geometry?.location?.lat,
          longitude: placeData.geometry?.location?.lng,
          metadata: {
            google_place_id: placeData.place_id,
            main_image: photos[0] || null,
            additional_images: photos.slice(1),
            address_district: extractDistrict(placeData.formatted_address),
            rating: placeData.rating,
            total_ratings: placeData.user_ratings_total,
            views_count: Math.floor(Math.random() * 1000) + 200,
            plan: 'basic',
            location: placeData.geometry?.location,
            types: placeData.types,
            business_status: placeData.business_status
          }
        };
        
        // V√©rifier si l'√©tablissement existe d√©j√†
        const { data: existing } = await supabase
          .from('establishments')
          .select('id')
          .eq('slug', slug)
          .single();

        if (existing) {
          // Mettre √† jour avec les vraies donn√©es
          const { error } = await supabase
            .from('establishments')
            .update(establishmentData)
            .eq('id', existing.id);
            
          if (error) {
            console.error(`‚ùå Erreur mise √† jour ${placeData.name}:`, error.message);
            totalErrors++;
          } else {
            // Supprimer les anciens m√©dias et ins√©rer les nouveaux
            await supabase
              .from('establishment_media')
              .delete()
              .eq('establishment_id', existing.id);
            
            await insertEstablishmentMedia(existing.id, photos);
            
            console.log(`‚úÖ ${placeData.name} mis √† jour avec vraies donn√©es`);
            console.log(`   üì∑ ${photos.length} photos ajout√©es`);
            if (placeData.rating) {
              console.log(`   ‚≠ê Note: ${placeData.rating}/5 (${placeData.user_ratings_total} avis)`);
            }
            totalUpdated++;
          }
        } else {
          // Ins√©rer nouveau
          const { data: newEstablishment, error } = await supabase
            .from('establishments')
            .insert(establishmentData)
            .select('id')
            .single();
            
          if (error) {
            console.error(`‚ùå Erreur insertion ${placeData.name}:`, error.message);
            totalErrors++;
          } else {
            // Ins√©rer les m√©dias
            await insertEstablishmentMedia(newEstablishment.id, photos);
            
            console.log(`‚úÖ ${placeData.name} ajout√© avec vraies donn√©es`);
            console.log(`   üì∑ ${photos.length} photos ajout√©es`);
            if (placeData.rating) {
              console.log(`   ‚≠ê Note: ${placeData.rating}/5 (${placeData.user_ratings_total} avis)`);
            }
            totalUpdated++;
          }
        }

      } catch (error) {
        console.error(`‚ùå Erreur traitement ${searchQuery}:`, error);
        totalErrors++;
      }
    }
  }

  console.log('\n' + '=' .repeat(50));
  console.log('üìä R√âSUM√â DU SCRAPING GOOGLE PLACES');
  console.log('=' .repeat(50));
  console.log(`‚úÖ √âtablissements mis √† jour: ${totalUpdated}`);
  console.log(`‚ùå Erreurs: ${totalErrors}`);
  console.log(`üìÅ Total trait√©: ${totalUpdated + totalErrors}`);
  console.log('\n‚ú® Scraping termin√© !');
  console.log('\nüí° Note: Les photos sont maintenant des vraies photos Google Places');
  console.log('   Les √©tablissements ont des notes et avis r√©els');
  console.log('   Les informations (t√©l√©phone, site web, horaires) sont √† jour');
}

// Alternative : Utiliser Puppeteer pour scraper sans API (gratuit mais plus lent)
async function scrapeWithPuppeteer() {
  console.log('üöÄ Alternative: Scraping avec Puppeteer (sans API key)...\n');
  console.log('üìù Cette m√©thode scrape Google Maps directement');
  console.log('‚ö†Ô∏è  Plus lent mais gratuit\n');
  
  // Installer d'abord: npm install puppeteer
  try {
    const puppeteer = require('puppeteer');
    
    const browser = await puppeteer.launch({ 
      headless: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    const page = await browser.newPage();
    
    for (const [sector, establishments] of Object.entries(ESTABLISHMENTS_TO_SEARCH)) {
      console.log(`\nüìç Secteur: ${sector}`);
      
      for (const searchQuery of establishments) {
        console.log(`üîç Recherche: ${searchQuery}`);
        
        // Rechercher sur Google Maps
        await page.goto(`https://www.google.com/maps/search/${encodeURIComponent(searchQuery)}`);
        await page.waitForTimeout(3000);
        
        try {
          // Cliquer sur le premier r√©sultat
          await page.click('[role="article"]');
          await page.waitForTimeout(2000);
          
          // Extraire les informations
          const data = await page.evaluate(() => {
            const name = document.querySelector('h1')?.textContent;
            const address = document.querySelector('[data-item-id="address"]')?.textContent;
            const phone = document.querySelector('[data-item-id="phone"]')?.textContent;
            const website = document.querySelector('[data-item-id="authority"]')?.textContent;
            
            // Extraire les images
            const images = [];
            document.querySelectorAll('button[jsaction*="pane.heroHeaderImage"] img').forEach(img => {
              if (img.src && !img.src.includes('data:')) {
                images.push(img.src);
              }
            });
            
            return { name, address, phone, website, images };
          });
          
          console.log(`‚úÖ Trouv√©: ${data.name}`);
          console.log(`   üì∑ ${data.images.length} photos`);
          
          // Sauvegarder dans la base de donn√©es...
          
        } catch (error) {
          console.error(`‚ùå Erreur extraction ${searchQuery}:`, error.message);
        }
        
        // Attendre entre les requ√™tes
        await page.waitForTimeout(2000);
      }
    }
    
    await browser.close();
    
  } catch (error) {
    console.error('‚ùå Erreur: Puppeteer n\'est pas install√©');
    console.log('üí° Installez-le avec: npm install puppeteer');
  }
}

// Lancer le scraping
if (process.argv[2] === '--puppeteer') {
  scrapeWithPuppeteer().catch(console.error);
} else {
  scrapeWithGooglePlaces().catch(console.error);
}

console.log('\nüìù Usage:');
console.log('  node scrape-google-places.js          # Utilise Google Places API (n√©cessite une cl√©)');
console.log('  node scrape-google-places.js --puppeteer  # Scrape sans API (plus lent mais gratuit)');