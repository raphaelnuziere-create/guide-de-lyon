#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');

console.log('üöÄ D√âPLOIEMENT AUTOMATIQUE - GUIDE LYON V3');
console.log('==========================================');

const colors = {
  red: '\033[0;31m',
  green: '\033[0;32m',
  yellow: '\033[1;33m',
  blue: '\033[0;34m',
  reset: '\033[0m'
};

const log = {
  success: (msg) => console.log(`${colors.green}‚úÖ ${msg}${colors.reset}`),
  error: (msg) => console.log(`${colors.red}‚ùå ${msg}${colors.reset}`),
  warning: (msg) => console.log(`${colors.yellow}‚ö†Ô∏è  ${msg}${colors.reset}`),
  info: (msg) => console.log(`${colors.blue}üîç ${msg}${colors.reset}`)
};

async function deploy() {
  try {
    // 1. V√©rifier que nous sommes dans le bon projet
    if (!fs.existsSync('package.json')) {
      throw new Error('package.json non trouv√© - √™tes-vous dans le bon dossier?');
    }

    const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    if (packageJson.name !== 'guide-lyon-v2') {
      log.warning('Nom du projet diff√©rent de guide-lyon-v2');
    }

    log.info('D√©marrage du d√©ploiement Guide Lyon v3...');

    // 2. Nettoyer et installer les d√©pendances
    log.info('√âtape 1: Installation des d√©pendances...');
    execSync('rm -rf node_modules package-lock.json', { stdio: 'inherit' });
    execSync('npm install', { stdio: 'inherit' });
    log.success('D√©pendances install√©es');

    // 3. Lancer les tests automatiques
    log.info('√âtape 2: Tests du syst√®me...');
    try {
      execSync('node scripts/test-system.js', { stdio: 'inherit' });
      log.success('Tests r√©ussis');
    } catch (error) {
      log.error('Tests √©chou√©s - v√©rifiez test-report-failure.json');
      throw new Error('Tests failed - deployment aborted');
    }

    // 4. Build de production
    log.info('√âtape 3: Build de production...');
    execSync('npm run build', { stdio: 'inherit' });
    log.success('Build r√©ussi');

    // 5. V√©rifier les variables d'environnement pour Vercel
    log.info('√âtape 4: V√©rification de la configuration...');
    
    const requiredVars = {
      'NEXT_PUBLIC_DIRECTUS_URL': process.env.NEXT_PUBLIC_DIRECTUS_URL,
      'STRIPE_SECRET_KEY': process.env.STRIPE_SECRET_KEY?.substr(0, 10) + '...',
      'NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY': process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY?.substr(0, 10) + '...'
    };

    console.log('Variables d√©tect√©es:');
    Object.entries(requiredVars).forEach(([key, value]) => {
      if (value) {
        log.success(`${key}: ${value}`);
      } else {
        log.warning(`${key}: NON D√âFINIE`);
      }
    });

    // 6. D√©ployer sur Vercel
    log.info('√âtape 5: D√©ploiement sur Vercel...');
    
    try {
      // V√©rifier si vercel CLI est install√©
      execSync('which vercel', { stdio: 'pipe' });
    } catch (error) {
      log.warning('Vercel CLI non install√© - installation...');
      execSync('npm install -g vercel', { stdio: 'inherit' });
    }

    // D√©ployer en production
    execSync('vercel --prod --yes', { stdio: 'inherit' });
    log.success('D√©ploiement Vercel termin√©!');

    // 7. Instructions post-d√©ploiement
    console.log('\n' + '='.repeat(50));
    console.log('üéâ D√âPLOIEMENT R√âUSSI!');
    console.log('='.repeat(50));
    
    log.success('Guide Lyon v3 est maintenant en production!');
    
    console.log('\nüìã PROCHAINES √âTAPES:');
    console.log('1. üåê V√©rifier: https://www.guide-de-lyon.fr');
    console.log('2. üß™ Tester: https://www.guide-de-lyon.fr/annuaire-v3');
    console.log('3. üí∞ Tester: https://www.guide-de-lyon.fr/tarifs');
    console.log('4. üë®‚Äçüíº Admin: https://www.guide-de-lyon.fr/admin-v3');
    console.log('5. üîó Configurer webhooks Stripe:');
    console.log('   https://dashboard.stripe.com/webhooks');
    console.log('   URL: https://www.guide-de-lyon.fr/api/stripe/webhook');
    
    console.log('\nüîß CONFIGURATION STRIPE:');
    console.log('   - √âv√©nements √† √©couter: checkout.session.completed');
    console.log('   - customer.subscription.created/updated/deleted');
    console.log('   - invoice.payment_succeeded/failed');

    // G√©n√©rer rapport de d√©ploiement
    const deploymentReport = {
      timestamp: new Date().toISOString(),
      version: '3.0.0',
      platform: 'Vercel',
      database: 'Directus Cloud',
      payment: 'Stripe',
      status: 'SUCCESS',
      urls: {
        production: 'https://www.guide-de-lyon.fr',
        annuaire: 'https://www.guide-de-lyon.fr/annuaire-v3',
        pricing: 'https://www.guide-de-lyon.fr/tarifs',
        admin: 'https://www.guide-de-lyon.fr/admin-v3'
      },
      features: [
        'Plans tarifaires: Basic (0‚Ç¨), Pro (19‚Ç¨), Expert (49‚Ç¨)',
        'Directus Cloud avec hooks automatiques',
        'Affichage prioritaire Expert > Pro > Basic',
        'Badges professionnels avec couleurs',
        'Webhooks Stripe int√©gr√©s',
        'Dashboard admin complet'
      ]
    };

    fs.writeFileSync('deployment-report.json', JSON.stringify(deploymentReport, null, 2));
    log.info('Rapport de d√©ploiement: deployment-report.json');

  } catch (error) {
    log.error('Erreur durant le d√©ploiement:');
    console.error(error.message);
    
    const errorReport = {
      timestamp: new Date().toISOString(),
      status: 'FAILED',
      error: error.message,
      recommendations: [
        'V√©rifier les variables d\'environnement',
        'Relancer npm install',
        'V√©rifier la connexion Vercel',
        'Consulter les logs: vercel logs'
      ]
    };
    
    fs.writeFileSync('deployment-error.json', JSON.stringify(errorReport, null, 2));
    process.exit(1);
  }
}

// Lancer le d√©ploiement
deploy();