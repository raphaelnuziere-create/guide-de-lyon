#!/usr/bin/env node
/**
 * Script pour v√©rifier la configuration DNS du domaine
 * V√©rifie SPF, DKIM, DMARC et l'authentification Brevo
 */

import dns from 'dns/promises';
import { promisify } from 'util';
import dns2 from 'dns';

const resolveTxt = promisify(dns2.resolveTxt);

const domain = 'guide-de-lyon.fr';

console.log('üîç V√©rification DNS pour', domain);
console.log('=' .repeat(60));

async function checkDNS() {
  const checks = {
    spf: false,
    dkim1: false,
    dkim2: false,
    dmarc: false,
    brevoCode: false
  };
  
  // V√©rifier SPF
  console.log('\nüìã V√©rification SPF (@)...');
  try {
    const spfRecords = await resolveTxt(domain);
    const spfRecord = spfRecords.flat().find(r => r.includes('v=spf1'));
    
    if (spfRecord) {
      console.log('‚úÖ SPF trouv√©:', spfRecord);
      if (spfRecord.includes('spf.brevo.com') || spfRecord.includes('spf.sendinblue.com')) {
        console.log('   ‚úÖ Brevo/SendinBlue autoris√©');
        checks.spf = true;
      } else {
        console.log('   ‚ö†Ô∏è Brevo non inclus dans SPF');
        console.log('   Ajoutez: include:spf.brevo.com');
      }
    } else {
      console.log('‚ùå SPF non trouv√©');
      console.log('   Ajoutez un enregistrement TXT:');
      console.log('   v=spf1 include:spf.brevo.com mx ~all');
    }
  } catch (error) {
    console.log('‚ùå Erreur SPF:', error.code);
  }
  
  // V√©rifier DKIM 1
  console.log('\nüìã V√©rification DKIM 1 (mail._domainkey)...');
  try {
    const dkimRecords = await resolveTxt(`mail._domainkey.${domain}`);
    const dkimRecord = dkimRecords.flat().join('');
    
    if (dkimRecord && dkimRecord.includes('k=rsa')) {
      console.log('‚úÖ DKIM 1 trouv√©');
      console.log('   D√©but:', dkimRecord.substring(0, 50) + '...');
      checks.dkim1 = true;
    } else {
      console.log('‚ùå DKIM 1 non trouv√©');
    }
  } catch (error) {
    console.log('‚ùå DKIM 1 non configur√©');
    console.log('   Ajoutez l\'enregistrement TXT fourni par Brevo');
  }
  
  // V√©rifier DKIM 2
  console.log('\nüìã V√©rification DKIM 2 (mail2._domainkey)...');
  try {
    const dkim2Records = await resolveTxt(`mail2._domainkey.${domain}`);
    const dkim2Record = dkim2Records.flat().join('');
    
    if (dkim2Record && dkim2Record.includes('k=rsa')) {
      console.log('‚úÖ DKIM 2 trouv√©');
      console.log('   D√©but:', dkim2Record.substring(0, 50) + '...');
      checks.dkim2 = true;
    } else {
      console.log('‚ùå DKIM 2 non trouv√©');
    }
  } catch (error) {
    console.log('‚ö†Ô∏è DKIM 2 non configur√© (optionnel)');
  }
  
  // V√©rifier DMARC
  console.log('\nüìã V√©rification DMARC (_dmarc)...');
  try {
    const dmarcRecords = await resolveTxt(`_dmarc.${domain}`);
    const dmarcRecord = dmarcRecords.flat().join('');
    
    if (dmarcRecord && dmarcRecord.includes('v=DMARC1')) {
      console.log('‚úÖ DMARC trouv√©:', dmarcRecord);
      checks.dmarc = true;
    } else {
      console.log('‚ùå DMARC non trouv√©');
    }
  } catch (error) {
    console.log('‚ö†Ô∏è DMARC non configur√© (recommand√©)');
    console.log('   Ajoutez: v=DMARC1; p=none; rua=mailto:dmarc@guide-de-lyon.fr');
  }
  
  // V√©rifier Brevo Code
  console.log('\nüìã V√©rification Brevo Code (brevo-code)...');
  try {
    const brevoRecords = await resolveTxt(`brevo-code.${domain}`);
    const brevoRecord = brevoRecords.flat().join('');
    
    if (brevoRecord && brevoRecord.includes('brevo-code:')) {
      console.log('‚úÖ Brevo Code trouv√©');
      checks.brevoCode = true;
    } else {
      console.log('‚ùå Brevo Code non trouv√©');
    }
  } catch (error) {
    console.log('‚ö†Ô∏è Brevo Code non configur√©');
    console.log('   N√©cessaire pour l\'authentification du domaine');
  }
  
  // R√©sum√©
  console.log('\n' + '=' .repeat(60));
  console.log('üìä R√âSUM√â DE LA CONFIGURATION');
  console.log('=' .repeat(60));
  
  const allChecks = Object.entries(checks);
  const passed = allChecks.filter(([_, v]) => v).length;
  const total = allChecks.length;
  
  allChecks.forEach(([check, status]) => {
    const icon = status ? '‚úÖ' : '‚ùå';
    const label = {
      spf: 'SPF (Autorisation Brevo)',
      dkim1: 'DKIM 1 (Signature principale)',
      dkim2: 'DKIM 2 (Signature backup)',
      dmarc: 'DMARC (Protection anti-phishing)',
      brevoCode: 'Brevo Code (V√©rification domaine)'
    }[check];
    
    console.log(`${icon} ${label}`);
  });
  
  console.log('\nüìà Score: ' + passed + '/' + total);
  
  if (passed === total) {
    console.log('\nüéâ Parfait ! Configuration compl√®te.');
    console.log('Votre domaine est pr√™t pour envoyer des emails professionnels.');
  } else if (checks.spf && checks.dkim1) {
    console.log('\n‚úÖ Configuration minimale OK.');
    console.log('Vous pouvez envoyer des emails, mais compl√©tez pour une meilleure d√©livrabilit√©.');
  } else {
    console.log('\n‚ö†Ô∏è Configuration incompl√®te.');
    console.log('Suivez le guide CONFIGURATION-PROFESSIONNELLE-EMAIL.md');
  }
  
  // Instructions
  console.log('\nüí° Prochaines √©tapes:');
  if (!checks.spf || !checks.dkim1 || !checks.brevoCode) {
    console.log('1. Connectez-vous √† Brevo: https://app.brevo.com');
    console.log('2. Settings ‚Üí Senders & IP ‚Üí Authenticate domain');
    console.log('3. Copiez les enregistrements DNS');
    console.log('4. Ajoutez-les dans OVH Manager ‚Üí Zone DNS');
    console.log('5. Attendez 1h et relancez ce script');
  } else {
    console.log('1. V√©rifiez dans Brevo que le domaine est authenticated');
    console.log('2. Ajoutez contact@guide-de-lyon.fr comme sender');
    console.log('3. Testez l\'envoi depuis le dashboard');
  }
}

// Lancer la v√©rification
checkDNS().catch(console.error);